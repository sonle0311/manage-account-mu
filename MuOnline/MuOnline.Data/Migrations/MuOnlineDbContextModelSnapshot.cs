// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuOnline.Database.EF;

#nullable disable

namespace MuOnline.Database.Migrations
{
    [DbContext(typeof(MuOnlineDbContext))]
    partial class MuOnlineDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.AccountCharacter", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ExtClass")
                        .HasColumnType("int");

                    b.Property<int>("ExtWarehouse")
                        .HasColumnType("int");

                    b.Property<string>("GameId1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GameID1");

                    b.Property<string>("GameId2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GameID2");

                    b.Property<string>("GameId3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GameID3");

                    b.Property<string>("GameId4")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GameID4");

                    b.Property<string>("GameId5")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GameID5");

                    b.Property<string>("GameIdc")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GameIDC");

                    b.Property<byte?>("MoveCnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"), 1L, 1);

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("AccountCharacter", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CashLog", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("UserID");

                    b.ToTable("CashLog", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CashShopDatum", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<int?>("GoblinPoint")
                        .HasColumnType("int");

                    b.Property<int>("Ruud")
                        .HasColumnType("int");

                    b.Property<int?>("WcoinC")
                        .HasColumnType("int")
                        .HasColumnName("WCoinC");

                    b.Property<int?>("WcoinP")
                        .HasColumnType("int")
                        .HasColumnName("WCoinP");

                    b.HasKey("AccountId")
                        .HasName("PK_TempCashShop");

                    b.ToTable("CashShopData");
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CashShopInventory", b =>
                {
                    b.Property<int>("BaseItemCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaseItemCode"), 1L, 1);

                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<double?>("CoinValue")
                        .HasColumnType("float");

                    b.Property<string>("GiftName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("GiftText")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("InventoryType")
                        .HasColumnType("int");

                    b.Property<int?>("MainItemCode")
                        .HasColumnType("int");

                    b.Property<int?>("PackageMainIndex")
                        .HasColumnType("int");

                    b.Property<int?>("ProductBaseIndex")
                        .HasColumnType("int");

                    b.Property<int?>("ProductMainIndex")
                        .HasColumnType("int");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("BaseItemCode");

                    b.ToTable("CashShopInventory", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CashShopPeriodicItem", b =>
                {
                    b.Property<int>("ItemSerial")
                        .HasColumnType("int");

                    b.Property<int?>("Time")
                        .HasColumnType("int");

                    b.HasKey("ItemSerial");

                    b.ToTable("CashShopPeriodicItem", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.Character", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<int>("BlessBank")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BlocExpire")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Bloc_Expire");

                    b.Property<float?>("Bp")
                        .HasColumnType("real")
                        .HasColumnName("BP");

                    b.Property<int?>("CLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cLevel")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ChaosBank")
                        .HasColumnType("int");

                    b.Property<short?>("ChatLimitTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("Class")
                        .HasColumnType("tinyint");

                    b.Property<int>("CreateonBank")
                        .HasColumnType("int");

                    b.Property<byte?>("CtlCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("DbVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Deads")
                        .HasColumnType("int");

                    b.Property<int?>("Dexterity")
                        .HasColumnType("int");

                    b.Property<byte[]>("EffectList")
                        .HasMaxLength(208)
                        .HasColumnType("varbinary(208)");

                    b.Property<int?>("Energy")
                        .HasColumnType("int");

                    b.Property<int?>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("ExtInventory")
                        .HasColumnType("int");

                    b.Property<int>("FruitAddPoint")
                        .HasColumnType("int");

                    b.Property<int?>("FruitPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("FruitSubPoint")
                        .HasColumnType("int");

                    b.Property<int>("GemStoneBank")
                        .HasColumnType("int");

                    b.Property<int>("GuardianBank")
                        .HasColumnType("int");

                    b.Property<int>("HarmonyBank")
                        .HasColumnType("int");

                    b.Property<int>("HighStoneBank")
                        .HasColumnType("int");

                    b.Property<byte[]>("Inventory")
                        .HasMaxLength(3776)
                        .HasColumnType("varbinary(3776)");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Ldate")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("LDate");

                    b.Property<int?>("Leadership")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LevelUpPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("Life")
                        .HasColumnType("real");

                    b.Property<int>("LifeBank")
                        .HasColumnType("int");

                    b.Property<int>("LowStoneBank")
                        .HasColumnType("int");

                    b.Property<int>("Lvdanhhieu")
                        .HasColumnType("int");

                    b.Property<int>("Lvtuchan")
                        .HasColumnType("int")
                        .HasColumnName("lvtuchan");

                    b.Property<byte[]>("MagicList")
                        .HasMaxLength(180)
                        .HasColumnType("varbinary(180)");

                    b.Property<float?>("Mana")
                        .HasColumnType("real");

                    b.Property<byte?>("MapDir")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("MapNumber")
                        .HasColumnType("smallint");

                    b.Property<short?>("MapPosX")
                        .HasColumnType("smallint");

                    b.Property<short?>("MapPosY")
                        .HasColumnType("smallint");

                    b.Property<int>("MasterResetCount")
                        .HasColumnType("int");

                    b.Property<float?>("MaxBp")
                        .HasColumnType("real")
                        .HasColumnName("MaxBP");

                    b.Property<float?>("MaxLife")
                        .HasColumnType("real");

                    b.Property<float?>("MaxMana")
                        .HasColumnType("real");

                    b.Property<float?>("MaxShield")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("MDate");

                    b.Property<int?>("Money")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PkCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PkLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((3))");

                    b.Property<int?>("PkTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Quest")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varbinary(50)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Rcrit")
                        .HasColumnType("int")
                        .HasColumnName("rcrit");

                    b.Property<int>("Rdef")
                        .HasColumnType("int")
                        .HasColumnName("rdef");

                    b.Property<int>("Rdmg")
                        .HasColumnType("int")
                        .HasColumnName("rdmg");

                    b.Property<int>("Rdouble")
                        .HasColumnType("int")
                        .HasColumnName("rdouble");

                    b.Property<int>("Relifes")
                        .HasColumnType("int");

                    b.Property<int>("ResetCount")
                        .HasColumnType("int");

                    b.Property<int>("ResetsTime")
                        .HasColumnType("int")
                        .HasColumnName("Resets_Time");

                    b.Property<int>("Rexc")
                        .HasColumnType("int")
                        .HasColumnName("rexc");

                    b.Property<int>("Rlife")
                        .HasColumnType("int")
                        .HasColumnName("rlife");

                    b.Property<int>("Rmana")
                        .HasColumnType("int")
                        .HasColumnName("rmana");

                    b.Property<float?>("Shield")
                        .HasColumnType("real");

                    b.Property<int>("SoulBank")
                        .HasColumnType("int");

                    b.Property<int?>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("TheGift")
                        .HasColumnType("int");

                    b.Property<int?>("Vitality")
                        .HasColumnType("int");

                    b.Property<int>("Zen")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Name"), false);

                    b.ToTable("Character", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CustomAttack", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<short>("Active")
                        .HasColumnType("smallint");

                    b.Property<int?>("AutoAddAgi")
                        .HasColumnType("int");

                    b.Property<int?>("AutoAddCmd")
                        .HasColumnType("int");

                    b.Property<int?>("AutoAddEne")
                        .HasColumnType("int");

                    b.Property<int?>("AutoAddStr")
                        .HasColumnType("int");

                    b.Property<int?>("AutoAddVit")
                        .HasColumnType("int");

                    b.Property<short?>("AutoBuff")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoReset")
                        .HasColumnType("smallint");

                    b.Property<short?>("Map")
                        .HasColumnType("smallint");

                    b.Property<short?>("OffPvP")
                        .HasColumnType("smallint");

                    b.Property<short?>("PosX")
                        .HasColumnType("smallint");

                    b.Property<short?>("PosY")
                        .HasColumnType("smallint");

                    b.Property<short?>("Skill")
                        .HasColumnType("smallint");

                    b.HasKey("Name");

                    b.ToTable("CustomAttack", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CustomGift", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.ToTable("CustomGift", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CustomNpcQuest", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quest")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("MonsterCount")
                        .HasColumnType("int");

                    b.HasKey("Name", "Quest");

                    b.ToTable("CustomNpcQuest", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CustomQuest", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quest")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("CustomQuest", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.DefaultClassType", b =>
                {
                    b.Property<byte>("Class")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("DbVersion")
                        .HasColumnType("tinyint");

                    b.Property<short?>("Dexterity")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("EffectList")
                        .HasMaxLength(208)
                        .HasColumnType("varbinary(208)");

                    b.Property<short?>("Energy")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Inventory")
                        .HasMaxLength(3776)
                        .HasColumnType("varbinary(3776)");

                    b.Property<short?>("Leadership")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("LevelUpPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("Life")
                        .HasColumnType("real");

                    b.Property<byte[]>("MagicList")
                        .HasMaxLength(180)
                        .HasColumnType("varbinary(180)");

                    b.Property<float?>("Mana")
                        .HasColumnType("real");

                    b.Property<short?>("MapNumber")
                        .HasColumnType("smallint");

                    b.Property<short?>("MapPosX")
                        .HasColumnType("smallint");

                    b.Property<short?>("MapPosY")
                        .HasColumnType("smallint");

                    b.Property<float?>("MaxLife")
                        .HasColumnType("real");

                    b.Property<float?>("MaxMana")
                        .HasColumnType("real");

                    b.Property<byte[]>("Quest")
                        .HasMaxLength(50)
                        .HasColumnType("varbinary(50)");

                    b.Property<short?>("Strength")
                        .HasColumnType("smallint");

                    b.Property<short?>("Vitality")
                        .HasColumnType("smallint");

                    b.HasKey("Class");

                    b.ToTable("DefaultClassType", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.EventLeoTheHelper", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("EventLeoTheHelper", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.EventSantaClau", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("EventSantaClaus");
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.ExtWarehouse", b =>
                {
                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<byte[]>("Items")
                        .HasMaxLength(3840)
                        .HasColumnType("varbinary(3840)");

                    b.Property<int?>("Money")
                        .HasColumnType("int");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.ToTable("ExtWarehouse", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.GameServerInfo", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("AceItemCount")
                        .HasColumnType("int");

                    b.Property<int>("ItemCount")
                        .HasColumnType("int");

                    b.Property<int?>("ZenCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Number");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Number"), false);

                    b.ToTable("GameServerInfo", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.GensDuprian", b =>
                {
                    b.Property<int?>("Contribution")
                        .HasColumnType("int");

                    b.Property<int?>("Family")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<long?>("Rank")
                        .HasColumnType("bigint");

                    b.ToTable("Gens_Duprian", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.GensRank", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Contribution")
                        .HasColumnType("int");

                    b.Property<int?>("Family")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Gens_Rank", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.GensReward", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Gens_Reward", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.GensVarnert", b =>
                {
                    b.Property<int?>("Contribution")
                        .HasColumnType("int");

                    b.Property<int?>("Family")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<long?>("Rank")
                        .HasColumnType("bigint");

                    b.ToTable("Gens_Varnert", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.GhrsTop1", b =>
                {
                    b.Property<int>("Relifes")
                        .HasColumnType("int");

                    b.Property<int>("Resetcount")
                        .HasColumnType("int")
                        .HasColumnName("resetcount");

                    b.Property<int>("Time")
                        .HasColumnType("int")
                        .HasColumnName("time");

                    b.ToTable("GHRS_top1", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.Guild", b =>
                {
                    b.Property<string>("GName")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("G_Name");

                    b.Property<int?>("GCount")
                        .HasColumnType("int")
                        .HasColumnName("G_Count");

                    b.Property<byte[]>("GMark")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("G_Mark");

                    b.Property<string>("GMaster")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("G_Master");

                    b.Property<string>("GNotice")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("G_Notice");

                    b.Property<int>("GRival")
                        .HasColumnType("int")
                        .HasColumnName("G_Rival");

                    b.Property<int?>("GScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("G_Score")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("GType")
                        .HasColumnType("int")
                        .HasColumnName("G_Type");

                    b.Property<int>("GUnion")
                        .HasColumnType("int")
                        .HasColumnName("G_Union");

                    b.Property<int?>("MemberCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"), 1L, 1);

                    b.HasKey("GName");

                    b.ToTable("Guild", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.GuildMember", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<byte?>("GLevel")
                        .HasColumnType("tinyint")
                        .HasColumnName("G_Level");

                    b.Property<string>("GName")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("G_Name");

                    b.Property<byte>("GStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("G_Status");

                    b.HasKey("Name");

                    b.ToTable("GuildMember", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.HelperDatum", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<byte[]>("Data")
                        .HasMaxLength(256)
                        .HasColumnType("binary(256)")
                        .IsFixedLength();

                    b.HasKey("Name");

                    b.ToTable("HelperData");
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.ItemLog", b =>
                {
                    b.Property<string>("Acc")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<short?>("I380")
                        .HasColumnType("smallint")
                        .HasColumnName("i380");

                    b.Property<string>("IExt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("iExt");

                    b.Property<short?>("IJh")
                        .HasColumnType("smallint")
                        .HasColumnName("iJh");

                    b.Property<short?>("ILuck")
                        .HasColumnType("smallint")
                        .HasColumnName("iLuck");

                    b.Property<string>("ILvl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iLvl");

                    b.Property<string>("IName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iName");

                    b.Property<short?>("ISet")
                        .HasColumnType("smallint")
                        .HasColumnName("iSet");

                    b.Property<short?>("ISkill")
                        .HasColumnType("smallint")
                        .HasColumnName("iSkill");

                    b.Property<byte[]>("ItemCode")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Seq")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SEQ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Seq"), 1L, 1);

                    b.Property<int?>("Sn")
                        .HasColumnType("int")
                        .HasColumnName("SN");

                    b.ToTable("ItemLog", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.LogCredito", b =>
                {
                    b.Property<int>("IdCreditos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_creditos");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCreditos"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Ip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("ip")
                        .IsFixedLength();

                    b.Property<string>("Login")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("login");

                    b.Property<short>("Tipo")
                        .HasColumnType("smallint")
                        .HasColumnName("tipo");

                    b.Property<int>("Valor")
                        .HasColumnType("int")
                        .HasColumnName("valor");

                    b.HasKey("IdCreditos");

                    b.ToTable("LOG_CREDITOS", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.LuckyCoin", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<int?>("LuckyCoin1")
                        .HasColumnType("int")
                        .HasColumnName("LuckyCoin");

                    b.HasKey("AccountId");

                    b.ToTable("LuckyCoin", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.LuckyItem", b =>
                {
                    b.Property<int>("ItemSerial")
                        .HasColumnType("int");

                    b.Property<int?>("DurabilitySmall")
                        .HasColumnType("int");

                    b.HasKey("ItemSerial");

                    b.ToTable("LuckyItem", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.Marry", b =>
                {
                    b.Property<string>("Character")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("MarriedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MarryCharacter")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.ToTable("Marry", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.MasterSkillTree", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("MasterExperience")
                        .HasColumnType("bigint");

                    b.Property<int?>("MasterLevel")
                        .HasColumnType("int");

                    b.Property<int?>("MasterPoint")
                        .HasColumnType("int");

                    b.Property<byte[]>("MasterSkill")
                        .HasMaxLength(360)
                        .HasColumnType("varbinary(360)");

                    b.HasKey("Name");

                    b.ToTable("MasterSkillTree", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.MembInfo", b =>
                {
                    b.Property<int>("MembGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("memb_guid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembGuid"), 1L, 1);

                    b.Property<DateTime>("AccountExpireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("AccountLevel")
                        .HasColumnType("int");

                    b.Property<string>("AddrDeta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("addr_deta");

                    b.Property<string>("AddrInfo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("addr_info");

                    b.Property<DateTime?>("ApplDays")
                        .HasColumnType("datetime")
                        .HasColumnName("appl_days");

                    b.Property<string>("BlocCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("bloc_code")
                        .IsFixedLength();

                    b.Property<DateTime?>("BlocExpire")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Bloc_Expire");

                    b.Property<string>("Ctl1Code")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ctl1_code")
                        .IsFixedLength();

                    b.Property<string>("FpasAnsw")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fpas_answ");

                    b.Property<string>("FpasQues")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fpas_ques");

                    b.Property<string>("JobCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("job__code")
                        .IsFixedLength();

                    b.Property<int>("Lock")
                        .HasColumnType("int");

                    b.Property<string>("MailAddr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mail_addr");

                    b.Property<string>("MailChek")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("mail_chek")
                        .HasDefaultValueSql("((0))")
                        .IsFixedLength();

                    b.Property<string>("MembId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("memb___id");

                    b.Property<string>("MembName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("memb_name");

                    b.Property<string>("MembPwd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("memb__pwd");

                    b.Property<DateTime?>("ModiDays")
                        .HasColumnType("datetime")
                        .HasColumnName("modi_days");

                    b.Property<DateTime?>("OutDays")
                        .HasColumnType("datetime")
                        .HasColumnName("out__days");

                    b.Property<string>("PhonNumb")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phon_numb");

                    b.Property<string>("PostCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("post_code")
                        .IsFixedLength();

                    b.Property<string>("SnoNumb")
                        .IsRequired()
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("char(18)")
                        .HasColumnName("sno__numb")
                        .IsFixedLength();

                    b.Property<string>("TelNumb")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tel__numb");

                    b.Property<DateTime?>("TrueDays")
                        .HasColumnType("datetime")
                        .HasColumnName("true_days");

                    b.HasKey("MembGuid")
                        .HasName("PK_MEMB_INFO_1");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("MembGuid"), false);

                    b.ToTable("MEMB_INFO", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.MembStat", b =>
                {
                    b.Property<string>("MembId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("memb___id");

                    b.Property<byte?>("ConnectStat")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ConnectTm")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("ConnectTM");

                    b.Property<DateTime?>("DisConnectTm")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("DisConnectTM");

                    b.Property<string>("Ip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("IP");

                    b.Property<int?>("OnlineHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ServerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MembId");

                    b.ToTable("MEMB_STAT", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.MkServer", b =>
                {
                    b.Property<int>("RecordeOn")
                        .HasColumnType("int")
                        .HasColumnName("recorde_on");

                    b.Property<short>("ReiDoMk")
                        .HasColumnType("smallint")
                        .HasColumnName("rei_do_mk");

                    b.ToTable("MK_Server", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.MuCastleDatum", b =>
                {
                    b.Property<int>("MapSvrGroup")
                        .HasColumnType("int")
                        .HasColumnName("MAP_SVR_GROUP");

                    b.Property<bool>("CastleOccupy")
                        .HasColumnType("bit")
                        .HasColumnName("CASTLE_OCCUPY");

                    b.Property<decimal>("Money")
                        .HasColumnType("money")
                        .HasColumnName("MONEY");

                    b.Property<string>("OwnerGuild")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("OWNER_GUILD");

                    b.Property<DateTime>("SiegeEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SIEGE_END_DATE");

                    b.Property<bool>("SiegeEnded")
                        .HasColumnType("bit")
                        .HasColumnName("SIEGE_ENDED");

                    b.Property<bool>("SiegeGuildlistSetted")
                        .HasColumnType("bit")
                        .HasColumnName("SIEGE_GUILDLIST_SETTED");

                    b.Property<DateTime>("SiegeStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SIEGE_START_DATE");

                    b.Property<int>("TaxHuntZone")
                        .HasColumnType("int")
                        .HasColumnName("TAX_HUNT_ZONE");

                    b.Property<int>("TaxRateChaos")
                        .HasColumnType("int")
                        .HasColumnName("TAX_RATE_CHAOS");

                    b.Property<int>("TaxRateStore")
                        .HasColumnType("int")
                        .HasColumnName("TAX_RATE_STORE");

                    b.HasKey("MapSvrGroup");

                    b.ToTable("MuCastle_DATA", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.MuCastleMoneyStatistic", b =>
                {
                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LOG_DATE");

                    b.Property<int>("MapSvrGroup")
                        .HasColumnType("int")
                        .HasColumnName("MAP_SVR_GROUP");

                    b.Property<decimal>("MoneyChange")
                        .HasColumnType("money")
                        .HasColumnName("MONEY_CHANGE");

                    b.ToTable("MuCastle_MONEY_STATISTICS", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.MuCastleNpc", b =>
                {
                    b.Property<int>("MapSvrGroup")
                        .HasColumnType("int")
                        .HasColumnName("MAP_SVR_GROUP");

                    b.Property<DateTime>("NpcCreatedate")
                        .HasColumnType("datetime")
                        .HasColumnName("NPC_CREATEDATE");

                    b.Property<int>("NpcDfLevel")
                        .HasColumnType("int")
                        .HasColumnName("NPC_DF_LEVEL");

                    b.Property<byte>("NpcDir")
                        .HasColumnType("tinyint")
                        .HasColumnName("NPC_DIR");

                    b.Property<int>("NpcHp")
                        .HasColumnType("int")
                        .HasColumnName("NPC_HP");

                    b.Property<int>("NpcIndex")
                        .HasColumnType("int")
                        .HasColumnName("NPC_INDEX");

                    b.Property<int>("NpcMaxhp")
                        .HasColumnType("int")
                        .HasColumnName("NPC_MAXHP");

                    b.Property<int>("NpcNumber")
                        .HasColumnType("int")
                        .HasColumnName("NPC_NUMBER");

                    b.Property<int>("NpcRgLevel")
                        .HasColumnType("int")
                        .HasColumnName("NPC_RG_LEVEL");

                    b.Property<byte>("NpcX")
                        .HasColumnType("tinyint")
                        .HasColumnName("NPC_X");

                    b.Property<byte>("NpcY")
                        .HasColumnType("tinyint")
                        .HasColumnName("NPC_Y");

                    b.HasIndex(new[] { "MapSvrGroup", "NpcNumber", "NpcIndex" }, "IX_NPC_SUBKEY")
                        .IsUnique();

                    b.ToTable("MuCastle_NPC", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.MuCastleRegSiege", b =>
                {
                    b.Property<byte>("IsGiveup")
                        .HasColumnType("tinyint")
                        .HasColumnName("IS_GIVEUP");

                    b.Property<int>("MapSvrGroup")
                        .HasColumnType("int")
                        .HasColumnName("MAP_SVR_GROUP");

                    b.Property<int>("RegMarks")
                        .HasColumnType("int")
                        .HasColumnName("REG_MARKS");

                    b.Property<string>("RegSiegeGuild")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("REG_SIEGE_GUILD");

                    b.Property<int>("SeqNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQ_NUM");

                    b.HasIndex(new[] { "MapSvrGroup", "RegSiegeGuild" }, "IX_ATTACK_GUILD_SUBKEY")
                        .IsUnique();

                    b.ToTable("MuCastle_REG_SIEGE", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.MuCastleSiegeGuildlist", b =>
                {
                    b.Property<int>("GuildId")
                        .HasColumnType("int")
                        .HasColumnName("GUILD_ID");

                    b.Property<bool>("GuildInvolved")
                        .HasColumnType("bit")
                        .HasColumnName("GUILD_INVOLVED");

                    b.Property<string>("GuildName")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("GUILD_NAME");

                    b.Property<int>("GuildScore")
                        .HasColumnType("int")
                        .HasColumnName("GUILD_SCORE");

                    b.Property<int>("MapSvrGroup")
                        .HasColumnType("int")
                        .HasColumnName("MAP_SVR_GROUP");

                    b.ToTable("MuCastle_SIEGE_GUILDLIST", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.OptionDatum", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<byte?>("ChatWindow")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Ekey")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("GameOption")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Qkey")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Qwerlevel")
                        .HasColumnType("int")
                        .HasColumnName("QWERLevel");

                    b.Property<byte?>("Rkey")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("SkillKey")
                        .HasMaxLength(20)
                        .HasColumnType("binary(20)")
                        .IsFixedLength();

                    b.Property<byte?>("Wkey")
                        .HasColumnType("tinyint");

                    b.HasKey("Name");

                    b.ToTable("OptionData");
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.QuestKillCount", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("KillCount1")
                        .HasColumnType("int");

                    b.Property<int?>("KillCount2")
                        .HasColumnType("int");

                    b.Property<int?>("KillCount3")
                        .HasColumnType("int");

                    b.Property<int?>("KillCount4")
                        .HasColumnType("int");

                    b.Property<int?>("KillCount5")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterClass1")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterClass2")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterClass3")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterClass4")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterClass5")
                        .HasColumnType("int");

                    b.Property<int?>("QuestIndex")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("QuestKillCount", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.QuestWorld", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<byte[]>("QuestWorldList")
                        .HasMaxLength(400)
                        .HasColumnType("varbinary(400)");

                    b.HasKey("Name");

                    b.ToTable("QuestWorld", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.RankingBloodCastle", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("ScoreSemanal")
                        .HasColumnType("int")
                        .HasColumnName("Score_semanal");

                    b.HasKey("Name");

                    b.ToTable("RankingBloodCastle", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.RankingChaosCastle", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("ScoreSemanal")
                        .HasColumnType("int")
                        .HasColumnName("Score_semanal");

                    b.HasKey("Name");

                    b.ToTable("RankingChaosCastle", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.RankingDevilSquare", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("ScoreSemanal")
                        .HasColumnType("int")
                        .HasColumnName("Score_semanal");

                    b.HasKey("Name");

                    b.ToTable("RankingDevilSquare", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.RankingDuel", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("LoseScore")
                        .HasColumnType("int");

                    b.Property<int?>("WinScore")
                        .HasColumnType("int");

                    b.Property<int>("WinScoreSemanal")
                        .HasColumnType("int")
                        .HasColumnName("WinScore_semanal");

                    b.HasKey("Name");

                    b.ToTable("RankingDuel", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.RankingIllusionTemple", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("RankingIllusionTemple", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.RankingKingGuild", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreSemanal")
                        .HasColumnType("int")
                        .HasColumnName("Score_semanal");

                    b.HasKey("Name");

                    b.ToTable("RankingKingGuild", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.RankingKingPlayer", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreSemanal")
                        .HasColumnType("int")
                        .HasColumnName("Score_semanal");

                    b.HasKey("Name");

                    b.ToTable("RankingKingPlayer", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.RankingTvT", b =>
                {
                    b.Property<int>("Deads")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.ToTable("RankingTvT", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.TCguid", b =>
                {
                    b.Property<int>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GUID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Guid"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Guid");

                    b.ToTable("T_CGuid", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.TFriendList", b =>
                {
                    b.Property<byte?>("Del")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("FriendGuid")
                        .HasColumnType("int");

                    b.Property<string>("FriendName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Guid")
                        .HasColumnType("int")
                        .HasColumnName("GUID");

                    b.ToTable("T_FriendList", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.TFriendMail", b =>
                {
                    b.Property<int>("Guid")
                        .HasColumnType("int")
                        .HasColumnName("GUID");

                    b.Property<int>("MemoIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((10))");

                    b.Property<byte?>("Act")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("BRead")
                        .HasColumnType("bit")
                        .HasColumnName("bRead");

                    b.Property<byte?>("Dir")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FriendName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<byte[]>("Memo")
                        .HasMaxLength(1000)
                        .HasColumnType("varbinary(1000)");

                    b.Property<byte[]>("Photo")
                        .HasMaxLength(18)
                        .HasColumnType("binary(18)")
                        .IsFixedLength();

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("WDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnName("wDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Guid", "MemoIndex")
                        .HasName("PK_T_FriendMemo");

                    b.ToTable("T_FriendMail", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.TFriendMain", b =>
                {
                    b.Property<int>("Guid")
                        .HasColumnType("int")
                        .HasColumnName("GUID");

                    b.Property<byte?>("FriendCount")
                        .HasColumnType("tinyint");

                    b.Property<int?>("MemoCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((10))");

                    b.Property<int?>("MemoTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Guid");

                    b.ToTable("T_FriendMain", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.TPetItemInfo", b =>
                {
                    b.Property<int>("ItemSerial")
                        .HasColumnType("int");

                    b.Property<int?>("PetExp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Pet_Exp")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("PetLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Pet_Level")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ItemSerial")
                        .HasName("PK_T_Pet_Info");

                    b.ToTable("T_PetItem_Info", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.TWaitFriend", b =>
                {
                    b.Property<int>("FriendGuid")
                        .HasColumnType("int");

                    b.Property<string>("FriendName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Guid")
                        .HasColumnType("int")
                        .HasColumnName("GUID");

                    b.ToTable("T_WaitFriend", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.Warehouse", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<byte?>("DbVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("EndUseDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("Items")
                        .HasMaxLength(3840)
                        .HasColumnType("varbinary(3840)");

                    b.Property<int?>("Money")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Pw")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("pw")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("AccountId");

                    b.ToTable("warehouse", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.WarehouseGuild", b =>
                {
                    b.Property<string>("Guild")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<byte?>("DbVersion")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("EndUseDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("Items")
                        .HasMaxLength(3840)
                        .HasColumnType("varbinary(3840)");

                    b.Property<int?>("Money")
                        .HasColumnType("int");

                    b.Property<short?>("Pw")
                        .HasColumnType("smallint")
                        .HasColumnName("pw");

                    b.Property<int>("StatusRender")
                        .HasColumnType("int");

                    b.HasKey("Guild")
                        .HasName("PK_warehouseguild");

                    b.ToTable("WarehouseGuild", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.WzCwInfo", b =>
                {
                    b.Property<int?>("CrywolfOccufy")
                        .HasColumnType("int")
                        .HasColumnName("CRYWOLF_OCCUFY");

                    b.Property<int?>("CrywolfState")
                        .HasColumnType("int")
                        .HasColumnName("CRYWOLF_STATE");

                    b.Property<int?>("MapSvrGroup")
                        .HasColumnType("int")
                        .HasColumnName("MAP_SVR_GROUP");

                    b.ToTable("WZ_CW_INFO", (string)null);
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CustomNpcQuest", b =>
                {
                    b.HasOne("MuOnline.Database.Entities.Entites.Character", "NameNavigation")
                        .WithMany("CustomNpcQuests")
                        .HasForeignKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomNpcQuest_Character");

                    b.Navigation("NameNavigation");
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.CustomQuest", b =>
                {
                    b.HasOne("MuOnline.Database.Entities.Entites.Character", "NameNavigation")
                        .WithOne("CustomQuest")
                        .HasForeignKey("MuOnline.Database.Entities.Entites.CustomQuest", "Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomQuest_Character");

                    b.Navigation("NameNavigation");
                });

            modelBuilder.Entity("MuOnline.Database.Entities.Entites.Character", b =>
                {
                    b.Navigation("CustomNpcQuests");

                    b.Navigation("CustomQuest");
                });
#pragma warning restore 612, 618
        }
    }
}
